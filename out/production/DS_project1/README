# Lab Authors
    Zeyu Sun (andrewID: zeyus) & Chenxuan Weng (andrewID: chenxuaw)

# 'rmi' package brief
    'Skeleton' and 'Stub' are implemented according to the provided documents.
    'ListenerThread' implements the listening thread at Skeleton server side, accepting connections from client(Stub)
    'ServiceThread' acts as handler to read and parse method calls(name & arguments) forwarded by Stub Object
    'StubInvocationHandler' is related to Proxy class, every proxy object has a reference to an invocation handler,
     whose 'invoke' method is called whenever a method is called on the proxy object.

# about 'PingPongTest'
    > How to Run ? (Provide an example Below)
        1. Upload the whole project folder ('DS_project1') to Shark Machine:
            $ scp -r DS_project1 andrewid@shark.ics.cs.cmu.edu:~/private/private_folder
        2. Log into Shark Machine, locate the folder uploaded
            $ make clean
            $ make
            (Then you can actually type in '$ make test' to do the run all original test cases.
        3. Run the PingPongTest.ServerDriver on one Shark Machine (say 'lemonshark' here, and Use port number: 8080)
            $ java PingPongTest.ServerDriver 8080
        4. Then Run 'PingPongTest.PingPongClient' on another Shark Machine (say 'houndshark' here)
            $ java PingPongTest.PingPongClient lemonshark.ics.cs.cmu.edu 8080
        5. Then The Testing Result will be output on the Client Side


MAKEFILE TARGETS

To compile all Java files, execute
        make
To run all test cases, run
        make test
To package source files into an archive, run
        make archive

To generate documentation, execute
        make docs
The documentation for the package rmi can then be viewed at javadoc/index.html.
Alternatively, complete documentation of all classes and members, including test
cases, can be generated using
        make docs-all
and then viewed at javadoc-all/index.html.

To clean the build directories, execute
        make clean


TESTS

Various tests can be run by executing:
        java conformance.ConformanceTests
        java -cp ./:./unit unit.UnitTests
        java test.SelfTest
Conformance tests check the public interfaces of the classes in the rmi package
for conformance to the written specifications. The tests are thorough but not
exhaustive. Conformance tests are grouped by the packages they test. For
example, conformance tests for the RMI library, which is in the package rmi, are
grouped in the package conformance.rmi. Conformance tests are used for grading.
You have been provided with a number of conformance tests to help you find
problems with your code. However, there may be additional tests used by the
staff during grading. Testing thoroughly is your responsibility.

Unit tests can be written to check package-private classes. Unit tests are in
the same package as the class they are testing: a unit test for a class in the
package rmi would also be in the package rmi (whereas a conformance test would
be in the different package conformance.rmi). Unit tests, are, however, kept in
a different directory in the source tree. The Java classpath is altered when
running unit tests to put the unit tests logically in the same package as the
code they are testing.

The class test.SelfTest runs some basic self-tests on the testing library.
